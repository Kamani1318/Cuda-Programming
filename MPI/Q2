%%sh
cat > hello.c << EOF
#include <stdio.h>
#include <string.h>
#include <mpi.h>
#include <stdbool.h>
#define RANGE_START 1
#define RANGE_END 100

bool isPrime(int num)
{
    if (num<2)
    {
        return false;
    }
    else
    {
        for(int i=2;i*i<=num;i++)
        {
            if (num % i == 0)
            {
                return false;
            }
        }
        return true;
    }
}

int main(int argc, char *argv[]) {
    MPI_Init(&argc,&argv);
    int rank,size;
    MPI_Comm_size(MPI_COMM_WORLD,&size);
    MPI_Comm_rank(MPI_COMM_WORLD,&rank);
    int start,end;
    int numPrime = 0;
    
    if (rank == 0)
    {
        start = RANGE_START;
        end = RANGE_END/2;
    }
    else
    {
        start = RANGE_END/2;
        end = RANGE_END;
    }
    
    for (int i=start;i<end;i++)
    {
        if (isPrime(i))
        {
            numPrime++;
        }
    }
    
    int receivedPrimes = 0;
    MPI_Reduce(&numPrime,&receivedPrimes,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
    if (rank == 0)
    {
        printf("Process 0 now has all prime numbers which are : %d", receivedPrimes);
    }

    int receivedPrimes;
    if (rank == 0)
    {
        // outbuf,outcnt,datatype,source,tag,comm,status
        MPI_Recv(&receivedPrimes,1,MPI_INT,1,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
        numPrime = numPrime + receivedPrimes;
        printf(" %d ", numPrime);
    }
    else
    {
        // inbuf,incnt,datatype,destination,tag,comm
        MPI_Send(&numPrime,1,MPI_INT,0,0,MPI_COMM_WORLD);
    }
    //.            inbuf,outbuf,count,datatype,operation,root,comm
    // or MPI_Recv(&numPrime,&receivedPrimes,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD)

    
    
    MPI_Finalize();
    return 0;
}
EOF
ls -l
