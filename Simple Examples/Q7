%%cuda
#include <stdio.h>
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <cstdlib>
#include <math.h>
#include <string.h>

#define N 3 // Matrix size

// Kernel to add two matrices where each column of the resultant matrix is computed by one thread

__global__ void addMatrixCol(float *A,float *B,float *C)
{
    int row = threadIdx.x;
    int col = blockIdx.x;
    
    C[row*N + col] = A[row*N + col] + B[row*N + col];
}

// Kernel to add two matrices where each row of the resultant matrix is computed by one thread

__global__ void addMatrixRow(float *A,float *B,float *C)
{
    int col = threadIdx.x;
    int row = blockIdx.x;
    
    C[row*N + col] = A[row*N + col] + B[row*N + col];
}

__global__ void addMatrixEle(float *A,float *B,float *C)
{
    int index = blockIdx.x*blockDim.x + threadIdx.x;
    
    C[index] = A[index] + B[index];
}

void printMatrix(float *X)
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            printf("%.2f ", X[i*N + j]);
        }
        printf("\n");
    }
}

void initializeMatrix(float *X)
{
    for(int i=0;i<N*N;i++)
    {
        X[i] = (float) rand()/RAND_MAX;
    }
    printf("\n");
    
}

int main() {
    // Allocate memory for host matrices
    float *A,*B,*C;
    
    A = (float*)malloc(N*N*sizeof(float));
    B = (float*)malloc(N*N*sizeof(float));
    C = (float*)malloc(N*N*sizeof(float));
    
    float m_size = N*N*sizeof(float);
    
    initializeMatrix(A);
    initializeMatrix(B);
    printf("Matrix A \n");
    printMatrix(A);
    printf("Matrix B \n");
    printMatrix(B);
    
    
    // Allocate memory for device matrices
    
    float *d_A,*d_B,*d_C;
    
    cudaMalloc(&d_A,m_size);
    cudaMalloc(&d_B,m_size);
    cudaMalloc(&d_C,m_size);
    
    cudaMemcpy(d_A,A,m_size,cudaMemcpyHostToDevice);
    cudaMemcpy(d_B,B,m_size,cudaMemcpyHostToDevice);
    
    addMatrixCol<<<3,3>>>(d_A,d_B,d_C);
    
    cudaMemcpy(C,d_C,m_size,cudaMemcpyDeviceToHost);
    printf("Resultant Matrix by columns is \n");
    printMatrix(C);
    
    addMatrixRow<<<3,3>>>(d_A,d_B,d_C);
    
    cudaMemcpy(C,d_C,m_size,cudaMemcpyDeviceToHost);
    printf("Resultant Matrix by rows is \n");
    printMatrix(C);
    
    addMatrixEle<<<3,3>>>(d_A,d_B,d_C);
    
    cudaMemcpy(C,d_C,m_size,cudaMemcpyDeviceToHost);
    printf("Resultant Matrix by element is \n");
    printMatrix(C);
    

}
