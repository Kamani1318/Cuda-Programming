%%cuda
#include <stdio.h>
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <cstdlib>

__global__ void add(int *x,int *y,int *z)
{
    int index = threadIdx.x;
    z[index] = x[index] + y[index];
}

int main()
{
    int *x,*y,*z,*d_x,*d_y,*d_z;
    printf("Enter the block size: ");
    int N = 100;
    
    // Allocate memory to host variables

    int size = sizeof(int)*N;

    x = (int*)malloc(size);
    y = (int*)malloc(size);
    z = (int*)malloc(size);

    for(int i=0;i<N;i++)
    {
        x[i] = rand()%100;
        y[i] = rand()%100;
        printf("x[%d] = %d \n",i,x[i]);
        printf("y[%d] = %d \n",i,y[i]);
    }

    // Allocate memory to device variables using host variables

    cudaMalloc(&d_x,size);
    cudaMalloc(&d_y,size);
    cudaMalloc(&d_z,size);

    // Copy value of host variables to device variables

    cudaMemcpy(d_x,x,size,cudaMemcpyHostToDevice);
    cudaMemcpy(d_y,y,size,cudaMemcpyHostToDevice);

    // Execute the kernel function in device

    add<<<1,N>>>(d_x,d_y,d_z);

    cudaMemcpy(z,d_z,size,cudaMemcpyDeviceToHost);

    for(int i =0;i<N;i++)
    {
        printf("%d \n", z[i]);
    }

    cudaFree(d_z);
    cudaFree(d_y);
    cudaFree(d_x);
    
}
