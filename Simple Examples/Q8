%%cuda
#include <stdio.h>
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <cstdlib>
#include <math.h>
#include <string.h>

#define N 4 // Matrix size
__global__ void addMatrix(float *A,float *B,float *C)
{
    int row = threadIdx.y + blockIdx.y*blockDim.y;
    int col = threadIdx.x + blockIdx.x*blockDim.x;
    
    if (row < N && col < N)
    {
        float sum1 = 0;
        for (int i=0;i<N;i++)
        {
            sum1 = sum1 + A[row*N + i]*B[i*N+col];
        }
        C[row*N + col] = sum1;
    }
}


void printMatrix(float *X)
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            printf("%.2f ", X[i*N + j]);
        }
        printf("\n");
    }
}

void initializeMatrix(float *X)
{
    for(int i=0;i<N*N;i++)
    {
        X[i] = (float) rand()/RAND_MAX;
    }
    printf("\n");
    
}

int main() {
    // Allocate memory for host matrices
    float *A,*B,*C;
    
    A = (float*)malloc(N*N*sizeof(float));
    B = (float*)malloc(N*N*sizeof(float));
    C = (float*)malloc(N*N*sizeof(float));
    
    float m_size = N*N*sizeof(float);
    
    initializeMatrix(A);
    initializeMatrix(B);
    printf("Matrix A \n");
    printMatrix(A);
    printf("Matrix B \n");
    printMatrix(B);
    
    
    // Allocate memory for device matrices
    
    float *d_A,*d_B,*d_C;
    
    cudaMalloc(&d_A,m_size);
    cudaMalloc(&d_B,m_size);
    cudaMalloc(&d_C,m_size);
    
    cudaMemcpy(d_A,A,m_size,cudaMemcpyHostToDevice);
    cudaMemcpy(d_B,B,m_size,cudaMemcpyHostToDevice);
    dim3 threadsPerBlock(2, 2);
    dim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y);
    
    addMatrix<<< numBlocks,threadsPerBlock>>>(d_A,d_B,d_C);
    
    cudaMemcpy(C,d_C,m_size,cudaMemcpyDeviceToHost);
    printf("Resultant Matrix is \n");
    printMatrix(C);
    

}
